{"version":3,"sources":["containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","search","employees","handleInputChange","event","searchValue","currentTarget","value","console","log","setState","searchedEmployees","filter","user","Object","values","join","toLowerCase","indexOf","sortEmployeesByName","sortedEmployees","sort","a","b","name","first","sortEmployeesByPhone","sortedEmployeesByPhone","cell","sortEmployeesByEmail","sortedEmployeesByEmail","email","sortEmployeesByAge","sortedEmployeesByAge","dob","age","Axios","get","then","res","data","results","this","className","type","onChange","placeholder","scope","onClick","map","employee","key","src","picture","thumbnail","alt","last","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6484ff14.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import API from \"../utils/API\";\nimport Axios from \"axios\";\n\nclass Home extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n  };\n\n  componentDidMount() {\n    Axios.get(\"https://randomuser.me/api/?results=50\").then((res) =>\n      this.setState({\n        employees: res.data.results,\n      })\n    );\n    this.sortEmployeesByName();\n    this.sortEmployeesByPhone();\n    this.sortEmployeesByEmail();\n    this.sortEmployeesByAge();\n  }\n\n  handleInputChange = (event) => {\n    const searchValue = event.currentTarget.value;\n    console.log(searchValue);\n    this.setState({ search: event.currentTarget.value });\n    const searchedEmployees = this.state.employees.filter((user) => {\n      console.log(\"user\", Object.values(user));\n      let results = Object.values(user).join(\"\").toLowerCase();\n\n      return results.indexOf(searchValue.toLowerCase()) !== -1;\n    });\n    this.setState({ employees: searchedEmployees });\n  };\n\n  sortEmployeesByName = () => {\n    function compare(a, b) {\n      console.log(a.name.first, b.name.first);\n      if (a.name.first > b.name.first) return 1;\n      if (b.name.first > a.name.first) return -1;\n      return 0;\n    }\n    const sortedEmployees = this.state.employees.sort(compare);\n    this.setState({\n      employees: sortedEmployees,\n    });\n  };\n\n  sortEmployeesByPhone = () => {\n    function compare(a, b) {\n      console.log(a.cell, b.cell);\n      if (a.cell > b.cell) return 1;\n      if (b.cell > a.cell) return -1;\n      return 0;\n    }\n    const sortedEmployeesByPhone = this.state.employees.sort(compare);\n    this.setState({\n      employees: sortedEmployeesByPhone,\n    });\n  };\n\n  sortEmployeesByEmail = () => {\n    function compare(a, b) {\n      console.log(a.email, b.email);\n      if (a.email > b.email) return 1;\n      if (b.email > a.email) return -1;\n      return 0;\n    }\n    const sortedEmployeesByEmail = this.state.employees.sort(compare);\n    this.setState({\n      employees: sortedEmployeesByEmail,\n    });\n  };\n\n  sortEmployeesByAge = () => {\n    function compare(a, b) {\n      console.log(a.dob.age, b.dob.age);\n      if (a.dob.age > b.dob.age) return 1;\n      if (b.dob.age > a.dob.age) return -1;\n      return 0;\n    }\n    const sortedEmployeesByAge = this.state.employees.sort(compare);\n    this.setState({\n      employees: sortedEmployeesByAge,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"jumbotron jumbotron-fluid text-center bg-primary text-white\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <hr className=\"my-4\" />\n          <p>\n            Click on the heading to filter by the heading or use the search box\n            to narrow your results.\n          </p>\n          <input\n            name=\"search\"\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.handleInputChange}\n            placeholder=\"search by name\"\n          />\n        </div>\n        <table className=\"table table-striped\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">Image</th>\n              <th scope=\"col\" onClick={this.sortEmployeesByName}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Name\n                </button>\n              </th>\n              <th scope=\"col\" onClick={this.sortEmployeesByPhone}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Phone\n                </button>\n              </th>\n              <th scope=\"col\" onClick={this.sortEmployeesByEmail}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Email\n                </button>\n              </th>\n              <th scope=\"col\" onClick={this.sortEmployeesByAge}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Age\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.map((employee) => (\n              <tr key={employee.cell}>\n                <td>\n                  <img\n                    src={employee.picture.thumbnail}\n                    alt=\"employee headshot\"\n                  />\n                </td>\n                <td>          \n                  {employee.name.first} {employee.name.last}{\" \"}\n                </td>\n                <td>{employee.cell}</td>\n                <td>{employee.email}</td>\n                <td>{employee.dob.age}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from \"./containers/Home\"\n\nconst App = () => {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}